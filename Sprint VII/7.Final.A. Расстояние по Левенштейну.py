# Идентификатор успешной посылки - 53662914

# -- ПРИНЦИП РАБОТЫ --
# Для вычисления расстояния по Левенштейну используется используем массив из числовых значений (dp),
# ответ после пересчета будет находиться в последней ячейке массива.
# Подсчет ведется для виртуальной матрицы размера n * m, где n и m - длины входящих строк.
# Преобразование строк возможно благодаря 3-м операциям: удалению, замене и вставке символа.
# Элемент dp[j] содержит в сумму минимальных преобразований для строки от 0 до j-1.
#
# -- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
# --
#
# -- ВРЕМЕННАЯ СЛОЖНОСТЬ --
# Сложность в худшем случае равна O(n * m).
#
# -- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
# Сложность в худшем случае равна O(n).

import sys


def main():
    line = sys.stdin.readline().rstrip()
    s = list(map(str, line))
    line = sys.stdin.readline().rstrip()
    t = list(map(str, line))

    n = len(s)
    m = len(t)

    dp = list(range(n + 1))
    for i in range(1, m + 1):
        previous = dp
        dp = [i] + [0] * n
        for j in range(1, n + 1):
            insert = previous[j] + 1
            remove = dp[j-1] + 1
            replace = previous[j-1]

            if s[j-1] != t[i-1]:
                replace += 1

            dp[j] = min(insert, remove, replace)

    print(dp[n])


if __name__ == '__main__':
    main()
